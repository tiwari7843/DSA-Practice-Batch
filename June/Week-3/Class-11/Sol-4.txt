calss Solution{
   public int[] searchRange(int[] nums, int target){  
      int[] ans= new int[2];
      ans[0]= firstSearch(nums, target, 0, nums.length-1);
      ans[1]= secondSearch(nums, target, 0, nums.length-1);
      return ans;
   }
   public int firstSearch(int[] arr, int target, int left, int right){
      int ans = -1;
      while(left<= right){
         int mid=(left+right)/2;
         if(arr[mid]>= target){
            right = mid-1;
         }
         if(arr[mid] == target){
            ans = mid;
         }
         else if(arr[mid]< target){
            left = mid +1;
         }
       }
       return ans;
    }
    public int secondSearch(int[] arr, int target, int left, int right){
      int ans = -1;
      while(left<= right){
         int mid=(left+right)/2;
         if(arr[mid]> target){
            right = mid-1;
         }
         else if(arr[mid]<= target){
            left = mid +1;
         }
         if(arr[mid] == target){
            ans = mid;
         }
       }
       return ans;
    }
}
   
         }

      }
   }
